{"version":3,"file":"vue.js","sources":["../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["export function initState(vm) {\r\n    const opts = vm.$options //获取所有的选项\r\n    if (opts.data) {\r\n        initData(vm)\r\n    }\r\n}\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data //data可能是函数或者对象\r\n    data = typeof data === \"function\" ? data.call(vm) : data\r\n    console.log(data)\r\n}","import {initState} from \"./state\";\r\n\r\nexport function initMixin(Vue) {//就是给Vue增加init方法\r\n    Vue.prototype._init = function (options) {//用于初始化操作\r\n        //vue vm.$options 就是获取用户配置\r\n        //如果这里没有挂载在实例上 那么在下面的 Vue.prototype 的其他方法上就无法获取options了\r\n        //这里用this有点恶心 需要保存一下this\r\n        const vm = this\r\n        vm.$options = options //将用户的选项挂载到实例上\r\n\r\n        //初始化状态\r\n        initState(vm)\r\n\r\n    }\r\n}\r\n\r\n","import {initMixin} from \"./init\";\r\n\r\nfunction Vue(options) { //option 就是用户的选项了\r\n    this._init(options)//默认就调用了init\r\n}\r\n\r\ninitMixin(Vue) //拓展了init方法\r\nexport default Vue"],"names":["initState","vm","opts","$options","data","initData","call","console","log","initMixin","Vue","prototype","_init","options"],"mappings":";;;;;;IAAO,SAASA,SAAS,CAACC,EAAE,EAAE;IAC1B,EAAA,IAAMC,IAAI,GAAGD,EAAE,CAACE,QAAQ,CAAC;MACzB,IAAID,IAAI,CAACE,IAAI,EAAE;QACXC,QAAQ,CAACJ,EAAE,CAAC,CAAA;IAChB,GAAA;IACJ,CAAA;IAEA,SAASI,QAAQ,CAACJ,EAAE,EAAE;IAClB,EAAA,IAAIG,IAAI,GAAGH,EAAE,CAACE,QAAQ,CAACC,IAAI,CAAC;IAC5BA,EAAAA,IAAI,GAAG,OAAOA,IAAI,KAAK,UAAU,GAAGA,IAAI,CAACE,IAAI,CAACL,EAAE,CAAC,GAAGG,IAAI,CAAA;IACxDG,EAAAA,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC,CAAA;IACrB;;ICTO,SAASK,SAAS,CAACC,GAAG,EAAE;IAAC;IAC5BA,EAAAA,GAAG,CAACC,SAAS,CAACC,KAAK,GAAG,UAAUC,OAAO,EAAE;IAAC;IACtC;IACA;IACA;QACA,IAAMZ,EAAE,GAAG,IAAI,CAAA;IACfA,IAAAA,EAAE,CAACE,QAAQ,GAAGU,OAAO,CAAC;;IAEtB;QACAb,SAAS,CAACC,EAAE,CAAC,CAAA;OAEhB,CAAA;IACL;;ICZA,SAASS,GAAG,CAACG,OAAO,EAAE;IAAE;IACpB,EAAA,IAAI,CAACD,KAAK,CAACC,OAAO,CAAC,CAAA;IACvB,CAAA;;IAEAJ,SAAS,CAACC,GAAG,CAAC,CAAC;;;;;;;;"}